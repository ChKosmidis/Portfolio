name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: next

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build

      - name: Find static export
        run: |
          echo "Looking for static export files..."
          
          # Check multiple possible locations for static files
          if [ -d "out" ]; then
            echo "✅ Found static files in 'out' directory"
            ls -la out/
          elif [ -f "index.html" ]; then
            echo "✅ Found static files in root directory"
            echo "Creating 'out' directory with current files..."
            mkdir -p out
            cp -r . out/
            # Remove unnecessary files
            rm -rf out/.git out/.github out/node_modules out/.next
            ls -la out/
          elif [ -d ".next/server/app" ] && [ -f ".next/server/app/index.html" ]; then
            echo "✅ Found static files in .next/server/app (Next.js 15 export location)"
            echo "Creating 'out' directory from .next/server/app..."
            mkdir -p out
            cp -r .next/server/app/* out/
            # Also copy static assets if they exist
            if [ -d ".next/static" ]; then
              echo "Copying static assets..."
              mkdir -p out/_next/static
              cp -r .next/static/* out/_next/static/
            fi
            echo "Contents of out directory:"
            ls -la out/
          else
            echo "❌ No static export found. Checking directory structure..."
            echo "Current directory:"
            ls -la
            echo "Searching for index.html:"
            find . -name "index.html" -not -path "./node_modules/*"
            echo "Checking .next directory:"
            if [ -d ".next" ]; then
              ls -la .next/ | head -10
            fi
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
